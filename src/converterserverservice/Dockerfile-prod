FROM golang:1.12-buster AS builder
# install xz
RUN apt-get update && apt-get install -y \
    xz-utils \
&& rm -rf /var/lib/apt/lists/*
# install UPX
ADD https://github.com/upx/upx/releases/download/v3.94/upx-3.94-amd64_linux.tar.xz /usr/local
RUN xz -d -c /usr/local/upx-3.94-amd64_linux.tar.xz | \
    tar -xOf - upx-3.94-amd64_linux/upx > /bin/upx && \
    chmod a+x /bin/upx

# install glide
RUN go get github.com/Masterminds/glide
# install cors (not glide compatible)
RUN go get github.com/rs/cors
# setup the working directory
ENV PROJECT rapGO.io/src/converterserverservice
WORKDIR /go/src/$PROJECT


# in production, comment the line above and un-comment the lines below.
ADD glide.yaml glide.yaml
ADD glide.lock glide.lock
## install dependencies
RUN glide install

###############

# add the source code
COPY . .
RUN go build -o converterserverservice .
# strip and compress the binary
RUN strip --strip-unneeded converterserverservice
RUN upx converterserverservice

# use a minimal alpine image
FROM alpine
RUN apk update && apk add ca-certificates && rm -rf /var/cache/apk/*
RUN apk add --no-cache bash coreutils grep sed
#create the TMP_FOLDER
RUN mkdir -p /data/tmp
# set working directory

# copy some needed binaries
COPY --from=builder /usr/lib/pkgconfig /usr/lib/pkgconfig
# copy the binary from builder
COPY --from=builder /go/src/rapGO.io/src/converterserverservice /converterserverservice
# expose port
EXPOSE 3001

# define all the needed environment variables
ENV SERVER_HTTP_PORT 3001
ENV SERVER_RUN_MODE debug
ENV SERVER_READ_TIMEOUT 60
ENV SERVER_WRITE_TIMEOUT 60

ENV INPUT_PREFIX input
ENV INPUT_SUFFIX .mp3
ENV OUTPUT_PREFIX output
ENV OUTPUT_SUFFIX .mp3

ENV TMP_FOLDER /data/tmp/

ENV KAFKA_BROKER kafka:9093
ENV KAFKA_CONSUMERGROUP_ID sarama_consumer
ENV KAFKA_TOPIC_TOBUCKET toBucket
ENV KAFKA_TOPIC_TOCORE toCore
ENV KAFKA_TOPIC_HEARTBEAT toHeartbeat
ENV KAFKA_TOPIC_TOSTREAM toStream

# run the binary
ENTRYPOINT ["./converterserverservice"]